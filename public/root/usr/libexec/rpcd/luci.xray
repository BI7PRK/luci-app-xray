#!/bin/sh
#
# Copyright 2020 Xingwang Liao <kuoruan@gmail.com>
# Licensed to the public under the MIT License.
#

. /usr/share/libubox/jshn.sh

check_running_status() {
	local pid="$(cat /var/run/xray.main.pid 2>/dev/null)"

	if [ -z "$pid" ] ; then
		echo '{ "code": 1 }'
		return
	fi

	local file="$(uci -q get xray.main.xray_file)"

	if [ -z "$file" ] ; then
		echo '{ "code": 2 }'
		return
	fi

	local file_name="$(basename "$file")"

	if ( pidof "$file_name" 2>/dev/null | grep -q "$pid" ) ; then
		echo '{ "code": 0 }'
	else
		echo '{ "code": 1 }'
	fi
}

get_xray_version() {
	local file="$(uci -q get xray.main.xray_file)"

	if [ ! -s "$file" ] ; then
		echo '{ "code": 1, "message": "Empty core file" }'
		return
	fi

	test -x "$file" || chmod +x "$file"

	local version="$(sh -c "$file version 2>/dev/null | head -n1")"

	if [ -n "$version" ] ; then
		printf '{ "code": 0, "version": "%s" }\n' "$version"
	else
		echo '{ "code": 1, "message": "Empty output" }'
	fi
}

get_xray_uuid() {
	local file="$(uci -q get xray.main.xray_file)"

	if [ ! -s "$file" ] ; then
		echo '{ "code": 1, "message": "Empty core file" }'
		return
	fi

	test -x "$file" || chmod +x "$file"

	local uuid="$(sh -c "$file uuid 2>/dev/null | head -n1")"

	if [ -n "$uuid" ] ; then
		printf '{ "code": 0, "uuid": "%s" }\n' "$uuid"
	else
		echo '{ "code": 1, "message": "Empty output" }'
	fi
}

get_xray_x25519() {
	local file="$(uci -q get xray.main.xray_file)"

	if [ ! -s "$file" ] ; then
		echo '{ "code": 1 }'
		return
	fi

	test -x "$file" || chmod +x "$file"

	local keys="$(sh -c "$file x25519 2>/dev/null | head -n2 | cut -d' ' -f3")"
	if [ -n "$keys" ] ; then
		local prk="$(echo "${keys}" | head -n 1)"
		local puk="$(echo "${keys}" | tail -n 1)"
		printf '{ "code": 0, "privateKey": "%s", "publicKey": "%s"  }\n' "$prk" "$puk"
	else
		echo '{ "code": 1, "message": "Empty output" }'
	fi
}

get_list_status() {
	local name="$1"

	if [ -z "$name" ] ; then
		echo '{ "code": 128 }'
		return
	fi

	local file="/etc/xray/${name}.txt"

	if [ ! -r "$file" ] ; then
		echo '{ "code": 2 }'
		return
	fi

	local count="$(grep -v '^$' "$file" | wc -l)"

	local lastModifyTime="$(date -r "$file" '+%Y/%m/%d %H:%M:%S %Z')"

	printf '{ "code": 0, "count": %d, "datetime": "%s" }\n' "$count" "$lastModifyTime"
}

case "$1" in
	list)
		json_set_namespace "xray_list" old_ns

		json_init

		json_add_object "runningStatus"
		json_close_object

		json_add_object "xrayVersion"
		json_close_object

		json_add_object "xrayUuid"
		json_close_object

		json_add_object "xrayX25519"
		json_close_object

		json_add_object "listStatus"
		json_add_string "name" "String"
		json_close_object

		json_dump -i

		json_cleanup

		json_set_namespace "$old_ns"
	;;
	call)
		case "$2" in
			runningStatus)
				check_running_status
			;;
			xrayVersion)
				get_xray_version
			;;
			xrayUuid)
				get_xray_uuid
			;;
			xrayX25519)
				get_xray_x25519
			;;
			listStatus)
				read input;

				json_set_namespace "xray_listStatus" old_ns

				json_load "$input"
				json_get_var list_name "name"
				json_cleanup

				json_set_namespace "$old_ns"

				get_list_status "$list_name"
			;;
		esac
	;;
esac
